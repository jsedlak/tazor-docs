@layout DocLayout
@page "/docs/data/treeview"
@using Tazor.Components.Forms

<PageTitle>TreeView - Tazor Docs</PageTitle>

<PageHead Title="TreeView" />

<p>The TreeView component supports viewing data typically stored in a hierarchical fashion.</p>

<SubHeader>Basic Usage</SubHeader>

<p class="mb-3">The TreeView component relies on two primary properties: Items and RequestTree. While it is possible to supply the entire tree of items using only the Tree property, it is also possible to dynamically build the tree by responding to RequestTree calls.</p>

<TreeView Items="@Items" RequestTree="@RequestTree" />
<CodeBlock Code=@Resources.Examples_Data_TreeView_Basic Language="razor" />

@code {
    protected IEnumerable<ITreeItem> Items { get; set; } = Enumerable.Empty<ITreeItem>();

    protected override void OnInitialized()
    {
        base.OnInitialized();

        Items = new ITreeItem[]
        {
            new TreeItem{ Title = $"Item 1", Icon = HeroIcons.Folder() },
            new TreeItem{ Title = $"Item 2", Icon = HeroIcons.Folder() },
            new TreeItem{ Title = $"Item 3", Icon = HeroIcons.Folder() },
            new TreeItem{ Title = $"Item 4", Icon = HeroIcons.Folder() },
            new TreeItem{ Title = $"Item 5", Icon = HeroIcons.Folder() }
        };
    }

    protected Task<IEnumerable<ITreeItem>> RequestTree(ITreeItem parent)
    {
        if (parent.Children != null && parent.Children.Any())
        {
            return Task.FromResult(parent.Children);
        }

        return Task.FromResult<IEnumerable<ITreeItem>>(
            new ITreeItem[]
            {
                new TreeItem{ Title = $"Item 1", Icon = HeroIcons.Folder() },
                new TreeItem{ Title = $"Item 2", Icon = HeroIcons.Folder() },
                new TreeItem{ Title = $"Item 3", Icon = HeroIcons.Folder() },
                new TreeItem{ Title = $"Item 4", Icon = HeroIcons.Folder() },
                new TreeItem{ Title = $"Item 5", Icon = HeroIcons.Folder() }
            }
        );
    }
}