@layout DocLayout
@page "/docs/content/hero-icons"

<PageTitle>Hero Icons - Tazor Docs</PageTitle>

<PageHead Title="Hero Icons" />

<p class="leading-loose mb-4">Tazor supports all <a href="https://heroicons.com/" target="_blank">Hero Icons</a> as markup strings.</p>

<SubHeader>Basic Usage</SubHeader>

<DemoPanel>
    @HeroIcons.ArchiveBox("block", "w-6 h-6")
</DemoPanel>

    <CodeBlock Code=@Resources.Examples_Content_HeroIcons_Basic></CodeBlock>

<Accordion MultiOpen=@true>
    <AccordionFold>
        <Header>All Icons - Solid</Header>
        <Content>
            @{
                var solidMethods = typeof(HeroIconsSolid).GetMethods(System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public);
            }

            <div class="grid grid-cols-5 gap-4">
                @foreach (var method in solidMethods)
                {
                    var markupString = (MarkupString)method.Invoke(null, new object[] { "block", "w-5 h-5" });
                    <DemoPanel>
                        <div class="flex items-center justify-center flex-col">
                            @(markupString)
                            <p class="mt-2 text-xs">@method.Name</p>
                        </div>
                    </DemoPanel>
                }
            </div>
        </Content>
    </AccordionFold>

    <AccordionFold>
        <Header>All Icons - Outline</Header>
        <Content>
            @{
                var outlineMethods = typeof(HeroIconsOutline).GetMethods(System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public);
            }

            <div class="grid grid-cols-5 gap-4">
                @foreach (var method in outlineMethods)
                {
                    var markupString = (MarkupString)method.Invoke(null, new object[] { "block", "w-5 h-5" });
                    <DemoPanel>
                        <div class="flex items-center justify-center flex-col">
                            @(markupString)
                            <p class="mt-2 text-xs">@method.Name</p>
                        </div>
                    </DemoPanel>
                }
            </div>
        </Content>
    </AccordionFold>

    <AccordionFold>
        <Header>All Icons - Micro</Header>
        <Content>
            @{
                var microMethods = typeof(HeroIconsMicro).GetMethods(System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public);
            }

            <div class="grid grid-cols-5 gap-4">
                @foreach (var method in microMethods)
                {
                    var markupString = (MarkupString)method.Invoke(null, new object[] { "block", "w-5 h-5" });
                    <DemoPanel>
                        <div class="flex items-center justify-center flex-col">
                            @(markupString)
                            <p class="mt-2 text-xs">@method.Name</p>
                        </div>
                    </DemoPanel>
                }
            </div>
        </Content>
    </AccordionFold>

    <AccordionFold>
        <Header>All Icons - Mini</Header>
        <Content>
            @{
                var miniMethods = typeof(HeroIconsMini).GetMethods(System.Reflection.BindingFlags.Static | System.Reflection.BindingFlags.Public);
            }

            <div class="grid grid-cols-5 gap-4">
                @foreach (var method in miniMethods)
                {
                    var markupString = (MarkupString)method.Invoke(null, new object[] { "block", "w-5 h-5" });
                    <DemoPanel>
                        <div class="flex items-center justify-center flex-col">
                            @(markupString)
                            <p class="mt-2 text-xs">@method.Name</p>
                        </div>
                    </DemoPanel>
                }
            </div>
        </Content>
    </AccordionFold>
</Accordion>



